{
  "connector_name":  "bigquery", /* connector name */
  "athena_work_group": "FederationIntegrationTests", /* The Athena Workgroup used for running integration tests (default: FederationIntegrationTests) */
  "athena_result_location": "<bucket_path (without s3://)>", /* The s3 bucket path used to store results of Athena queries */
  "secrets_manager_secret": "", /* Secret name used to retrieve user credentials from SecretsManager. */
  "schema_name": "<bigquery dataset name>", /* bigquery dataset name */
  "table_name":  "<table name>", /* bigquery table name */
  "table_name2": "<table name>", /* bigquery table name */
  "table_name3": "<table name>", /* bigquery table name */
  "table_name4": "<table name>", /* bigquery table name */
  "table_name5": "<table name>", /* bigquery table name */
  "environment_vars": {
    "spill_bucket": "<spill bucket>", /* The S3 bucket used for spilling excess data */
    "spill_prefix": "athena-spill", /* The prefix within the S3 spill bucket (default: athena-spill) */
    "disable_spill_encryption": "false", /* If set to true encryption for spilled data is disabled (default: false) */
    "spill_put_request_headers": "",  /* JSON encoded map of request headers and values for the s3 putObject request used for spilling. This is a String not an object. Optional.*/
    "region": "us-east-1", /* region name */
    "secret_manager_gcp_creds_name": "<secret name>", /* Secret name used to retrieve user credentials from SecretsManager. */
    "gcp_project_id": "<google bigquery project ID>", /* google bigquery project ID*/
    "concurrencyLimit": "10" /* concurrencyLimit will be used for splits*/
  },
  "vpc_configuration": {
    "region": "<region>", /* aws region name */
    "vpc_id": "<Enter Value>",                      /* The VPC Id (e.g. vpc-xxx) */
    "security_group_id": "<Enter Value>",           /* The Security Group Id (e.g. sg-xxx) */
    "subnet_ids": ["<Subnet 1>", "<Subnet 2>"],     /* A list consisting of at least one Subnet Id (e.g. subnet-xxxx) */
    "availability_zones": ["<Zone 1>", "<Zone 2>"]  /* A list consisting of at least one AZ (e.g. us-east-1a) */
  }
}

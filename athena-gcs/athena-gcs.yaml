Transform: 'AWS::Serverless-2016-10-31'

Metadata:
  AWS::ServerlessRepo::Application:
    Name: AthenaGcsConnector
    Description: 'This connector enables Amazon Athena to communicate with Google Cloud Storage (GCS) and fetch data from Parquet file format'
    Author: 'default author'
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['athena-federation', 'GCS', 'Google Cloud Storage', 'parquet', 'csv']
    HomePageUrl: https://github.com/awslabs/aws-athena-query-federation
    SemanticVersion: 2022.42.2
    SourceCodeUrl: https://github.com/awslabs/aws-athena-query-federation

Parameters:
  AthenaCatalogName:
    Description: 'The name you will give to this catalog is a Lambda name for Athena. Athena will use this name as the function name. This name must satisfy the pattern ^[a-z0-9-_]{1,64}$'
    Type: String
    AllowedPattern: ^[a-z0-9-_]{1,64}$
  SpillBucket:
    Description: 'The name of the bucket where this function can spill data.'
    Type: String
  SpillPrefix:
    Description: 'The prefix within SpillBucket where this function can spill data.'
    Type: String
    Default: athena-spill
  LambdaTimeout:
    Description: "Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)"
    Default: 900
    Type: Number
  LambdaMemory:
    Description: "Lambda memory in MB (min 128 - 3008 max)."
    Default: 3008
    Type: Number
  DisableSpillEncryption:
    Description: "WARNING: If set to 'true' encryption for spilled data is disabled."
    Default: "false"
    Type: String
  VpcId:
    Description: 'VPC ID'
    Type: 'AWS::EC2::VPC::Id'
  SubnetIds:
    Description: 'One or more Subnet IDs corresponding to the Subnet that the Lambda function can use to access you data source. (e.g. subnet1,subnet2)'
    Type: 'List<AWS::EC2::Subnet::Id>'
  SecurityGroupIds:
    Description: 'One or more SecurityGroup IDs corresponding to the SecurityGroup that should be applied to the Lambda function. (e.g. sg1,sg2,sg3)'
    Type: 'List<AWS::EC2::SecurityGroup::Id>'
  SecretNameOrPrefix:
    Description: 'Secret name (exact) or a prefix as a Secret Name pattern (e.g., <prefix>-<secret name>). Unless the given pattern is present in the Secret Name, invocation of GetSecretValue will be denied'
    Type: String
    Default: "gcs-*"
  GcsSecretName:
    Description: 'Secret key name in the AWS Secrets Manager.'
    Type: String
    Default: "gcs-athena"
  GcsCredentialKey:
    Description: 'GCS credential secret key that contains the GCS credentials JSON value (key in key/value).'
    Type: String
    Default: "gcs_credential_keys"
  FileExtension:
    Description: File extension to filter file names in a specific storage bucket. It can be any of PARQUET, and CSV.
    Type: String
Resources:
  ConnectorConfig:
    Type: 'AWS::Serverless::Function'
    Properties:
      Environment:
        Variables:
          disable_spill_encryption: !Ref DisableSpillEncryption
          spill_bucket: !Ref SpillBucket
          spill_prefix: !Ref SpillPrefix
          gcs_secret_name: !Ref GcsSecretName
          gcs_credential_key: !Ref GcsCredentialKey
          file_extension: !Ref FileExtension
          SSL_CERT_FILE: '/tmp/cacert.pem'
          GOOGLE_APPLICATION_CREDENTIALS: '/tmp/service-account.json'

      FunctionName: !Sub "${AthenaCatalogName}"
      Handler: "com.amazonaws.athena.connectors.gcs.GcsCompositeHandler"
      CodeUri: "./target/athena-gcs-2022.47.2.jar"
      Description: "Amazon Athena Gcs Connector"
      Runtime: java11
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Policies:
        - Statement:
            - Action:
                - athena:GetQueryExecution
                - s3:ListAllMyBuckets
              Effect: Allow
              Resource: '*'
          Version: '2012-10-17'
        - Statement:
            - Action:
                - s3:ListBucket
              Effect: Allow
              Resource:
                - !Sub 'arn:${AWS::Partition}:s3:::${SpillBucket}'
          Version: '2012-10-17'
        - Statement:
            - Action:
                - secretsmanager:GetSecretValue
              Effect: Allow
              Resource: !Sub 'arn:${AWS::Partition}:secretsmanager:*:*:secret:${SecretNameOrPrefix}'
        - S3ReadPolicy:
            BucketName:
              Ref: SpillBucket
        - S3WritePolicy:
            BucketName:
              Ref: SpillBucket
      VpcConfig:
        SecurityGroupIds: !Ref SecurityGroupIds
        SubnetIds: !Ref SubnetIds
